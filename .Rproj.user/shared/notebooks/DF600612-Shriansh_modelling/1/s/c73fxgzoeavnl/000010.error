{"frames":[{"func":"neuralnet(formula, data = training_data, hidden = c(5, 3), linear.output = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(1:rep, function(i) {\n    if (lifesign != \"none\") {\n        lifesign <- display(hidden, threshold, rep, i, lifesign)\n    } ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"calculate.neuralnet(learningrate.limit = learningrate.limit, \n    learningrate.factor = learningrate.factor, covariate = covariate, \n    response = response, data = data, model.list = model.list, \n    threshold = threshold, lifesign.step = lifesign.step, stepmax = stepmax,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"rprop(weights = weights, threshold = threshold, response = response, \n    covariate = covariate, learningrate.limit = learningrate.limit, \n    learningrate.factor = learningrate.factor, stepmax = stepmax, \n    lifesign = lifesign, lifesign.step = lifesign.step, act.fct = act.fct,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"compute.net(weights, length.weights, covariate = covariate, act.fct = act.fct, \n    act.deriv.fct = act.deriv.fct, output.act.fct = output.act.fct, \n    output.act.deriv.fct = output.act.deriv.fct, special)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in neurons[[i]] %*% weights[[i]] : \n  requires numeric/complex matrix/vector arguments\n"}